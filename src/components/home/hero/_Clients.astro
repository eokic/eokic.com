---
// TYPES
import type { IClient } from '@/interfaces'

// METHODS
import fetchApi from '@/lib/strapi'

// COMPONENTS
import { ImageHandler } from '@/components'
import { Debug } from 'astro/components'

// LOCAL STATE
const clients = await fetchApi<IClient[]>({
  endpoint: 'clients',
  query: { populate: 'deep' },
  wrappedByKey: 'data',
})

/*
  Returns the clients so that the ones with the highest importance are
  towards the middle of the array.

  Does the same on a two-row basis.
*/
const sortedClients = sortClients(clients)
function sortClients(arr: IClient[]): Record<string, IClient[]> {
  const ascSort = arr.sort((a, b) => a.importance - b.importance)

  // Prep the arrays
  const singleRow: IClient[] = []
  const twoRowsTop: IClient[] = []
  const twoRowsBottom: IClient[] = []

  // Use only the top 8 clients
  ascSort
    .slice(Math.max(0, ascSort.length - 9), ascSort.length)
    .forEach((item, index) => {
      // Single row
      if (singleRow.length < 2) singleRow.push(item)
      else singleRow.splice(Math.ceil((singleRow.length - 1) / 2), 0, item)

      // Two rows
      const twoRowTarget = (index + 1) % 2 === 0 ? twoRowsTop : twoRowsBottom
      if (twoRowTarget.length < 2) twoRowTarget.push(item)
      else
        twoRowTarget.splice(Math.ceil((twoRowTarget.length - 1) / 2), 0, item)
    })

  return {
    singleRow,
    twoRowsTop,
    twoRowsBottom,
  }
}
---

<footer
  class:list={['edge-fade relative max-lg:mt-2 -mb-2 lg:-mb-3 xl:-mb-inner']}
>
  <!-- Single row on larger devices -->
  <div
    class:list={[
      'z-1 max-lg:hidden mt-section lg:mt-outer flex justify-center items-center',
      'logo-curve gap-4 lg:gap-5 xl:gap-7 2xl:gap-8 pt-3 py-5',
    ]}
  >
    {
      sortedClients.singleRow
        ?.filter((client) => client.logo?.colorOnLight?.url)
        ?.map((client) => (
          <ImageHandler
            img={client.logo.colorOnLight}
            cssClass="shrink-0"
            style={{
              marginTop: client.logo.vAlign ? `${client.logo.vAlign}em` : '',
            }}
            alt={client.title}
            nonStandardRatio
          />
        ))
    }
  </div>

  <!-- Two rows on smaller devices -->
  <!-- aria-hidden as it's simply a duplicate for layout purposes -->
  <div class="lg:hidden relative z-1 -mt-3 -mb-3" aria-hidden="true">
    <div class="flex justify-center items-center gap-5 sm:gap-6 md:gap-7">
      {
        sortedClients.twoRowsTop
          ?.filter((client) => client.logo?.colorOnLight?.url)
          ?.map((client) => (
            <ImageHandler
              img={client.logo.colorOnLight}
              cssClass="shrink-0"
              alt={client.title}
              nonStandardRatio
            />
          ))
      }
    </div>
    <div class="flex justify-center items-center mt-3 gap-5 sm:gap-6 md:gap-7">
      {
        sortedClients.twoRowsBottom
          ?.filter((client) => client.logo?.colorOnLight?.url)
          ?.map((client) => (
            <ImageHandler
              img={client.logo.colorOnLight}
              cssClass="shrink-0"
              alt={client.title}
              nonStandardRatio
            />
          ))
      }
    </div>
  </div>
</footer>

<style is:global>
  .logo-curve {
    --base-offset: 8px;
    --base-rotation: 2deg;

    @media (min-width: 1280px) {
      --base-rotation: 1.5deg;
    }

    @media (min-width: 1400px) {
      --base-rotation: 1.35deg;
    }

    @media (min-width: 1600px) {
      --base-offset: 7px;
      --base-rotation: 0.9deg;
    }

    @media (min-width: 1900px) {
      --base-offset: 6px;
      --base-rotation: 0.75deg;
    }

    @media (min-width: 2100px) {
      --base-offset: 5px;
      --base-rotation: 0.65deg;
    }

    > *:nth-child(1) {
      transform: rotate(calc(1.9 * var(--base-rotation)));
    }

    > *:nth-child(2) {
      transform: translateY(calc(1.1 * var(--base-offset)))
        rotate(calc(1.65 * var(--base-rotation)));
    }

    > *:nth-child(3) {
      transform: translateY(calc(1.9 * var(--base-offset)))
        rotate(calc(1.35 * var(--base-rotation)));
    }

    > *:nth-child(4) {
      transform: translateY(calc(2.5 * var(--base-offset)))
        rotate(calc(0.75 * var(--base-rotation)));
    }

    > *:nth-child(5) {
      transform: translateY(calc(2.5 * var(--base-offset)))
        rotate(calc(-0.5 * var(--base-rotation)));
    }

    > *:nth-child(6) {
      transform: translateY(calc(1.9 * var(--base-offset)))
        rotate(calc(-1.25 * var(--base-rotation)));
    }

    > *:nth-child(7) {
      transform: translateY(calc(1.1 * var(--base-offset)))
        rotate(calc(-1.65 * var(--base-rotation)));
    }

    > *:nth-child(8) {
      transform: rotate(calc(-1.9 * var(--base-rotation)));
    }
  }
</style>
