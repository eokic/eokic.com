---
// PROPS
interface Props {
  cssClass?: string | string[]
  theme?: 'primary' | 'neutral' | 'a11y' // defaults to neutral
  label?: string
  href?: string
}
const { cssClass, theme, label, href } = Astro.props

// METHODS
import { markdownToHTML } from '@/utils'
---

<a
  class:list={[
    'btn py-2 px-2 sm:px-3',
    'body lh-body font-sans text-white bg-primary',
    'rounded-full transition-all cursor-pointer',
    `-${theme || 'neutral'}`,
    ...(typeof cssClass === 'string' ? [cssClass] : cssClass || []),
  ]}
  href={href}
  set:html={label ? markdownToHTML(label) : null}
>
  <slot />
</a>

<style is:global>
  .btn {
    display: inline-block;
    /* @apply hover:shadow-sm hover:shadow-slate-700/40; */
    /* @apply focus:opacity-[0.85] focus:shadow-none; */
    /* @apply active:opacity-[0.85] active:shadow-none; */
    /* @apply disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none; */
    outline: var(--hover-outline-width) solid transparent;
    outline-offset: 0.2em;

    &.-neutral {
      @apply text-primary bg-transparent;
    }

    &.-primary {
      @apply px-3 md:px-4;
      @apply font-semibold bg-primary;
    }

    &.-a11y {
      @apply sr-only focus:not-sr-only;
      @apply py-1 px-2 !important;
      @apply h4 lh-h4 font-semibold text-white bg-slate-900;
      @apply rounded-sm;
      outline: 1rem solid hsl(var(--color-focus-sr));

      &::focus {
        @apply inline-block;
      }
    }

    /* Hover */
    &:not(:active):hover {
      outline-color: inherit;
    }

    /* Focus */
    &:not(:active):focus-visible {
      outline: 0.5em solid hsl(var(--color-focus-sr));
    }

    /* Pressed */
    &:active {
      outline-width: 1px;
      outline-offset: 0.1em;
    }
  }
</style>
