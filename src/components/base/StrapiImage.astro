---
// TYPES
import { NStrapiMedia } from '@/interfaces'

// PROPS
interface Props {
  img: NStrapiMedia.Unknown
  cssClass?: string | string[]
  style?: Record<string, unknown>
  imgClass?: string | string[]
  imgStyle?: Record<string, unknown>
  fullWidth?: boolean
  fullHeight?: boolean
  nonStandardRatio?: boolean
  decorative?: boolean
  important?: boolean
  contain?: boolean
  inline?: boolean
  alt?: string // should come from Strapi though
}
const {
  img,
  cssClass,
  style,
  imgClass,
  imgStyle,
  fullWidth,
  fullHeight,
  nonStandardRatio,
  decorative,
  important,
  contain,
  inline,
  alt,
} = Astro.props

// COMPONENTS
import { Spinner } from '@/components'

// METHODS
import { getAspectRatio, ID } from '@/utils'

// Returns a valid `srcset` string based on the provided formats
function getSrcset(formats: Record<string, NStrapiMedia.Base>): string {
  return [
    Object.entries(formats)
      .filter(([size, variant]) => size !== '16' && size !== 'thumbnail')
      .map(([size, variant]) => `${variant.url} ${variant.width}w`),
    `${img.url} ${img.width}w`,
  ].join(', ')
}

// COMPUTED
const localID = ID()
const aspectRatio = getAspectRatio(img.width, img.height, !nonStandardRatio)
const isResponsive = img.formats && Object.keys(img.formats).length > 1
const srcset = img.formats && isResponsive ? getSrcset(img.formats) : null

// BASE64 THUMB
import fs from 'node:fs/promises'
// const url = new URL(img.url, import.meta.url) // TODO: figure out what to do with the path
const base64Thumb = isResponsive
  ? await fs.readFile('./public' + img.formats[16].url, {
      encoding: 'base64',
    })
  : null

// BASE64 ORIGINAL
const base64Orig = inline
  ? await fs.readFile('./public' + img.url, { encoding: 'base64' })
  : null
---

<div
  id=`st-image-${localID}`
  class:list={[
    'st-image relative overflow-hidden',
    'flex justify-center items-center',
    {
      vfx: !base64Orig,
    },
    ...(typeof cssClass === 'string' ? [cssClass] : cssClass || []),
  ]}
  style={{
    ...(style || {}),
  }}
>
  <img
    id=`st-image-img-${localID}`
    class:list={[
      'st-image-img relative z-2 max-h-full',
      contain ? 'object-contain' : 'object-cover',
      {
        [`aspect-${aspectRatio}`]: !nonStandardRatio,
        'w-full': fullWidth,
        'h-full': fullHeight,
      },
      ...(typeof imgClass === 'string' ? [imgClass] : imgClass || []),
    ]}
    style={{
      aspectRatio: aspectRatio,
      ...(imgStyle || {}),
    }}
    width={img.width}
    height={img.height}
    srcset={base64Orig ? null : srcset}
    src={base64Orig ? `data:${img.mime};base64,${base64Orig}` : img.url}
    alt={img.alternativeText || alt || ''}
    loading={base64Orig ? null : important ? 'eager' : 'lazy'}
    decoding="async"
    onload={base64Orig ? null : `javascript: onStrapiImageLoad('${localID}')`}
    role={decorative ? 'presentation' : null}
    aria-hidden={decorative ? 'true' : null}
  />

  <!-- Blurry placeholder -->
  <div
    id=`placeholder-${localID}`
    class="st-image-placeholder hidden absolute z-1 left-0 top-0 w-full h-full animate-pulse opacity-0"
  >
    <div
      class="st-image-placeholder-inner w-full h-full"
      style={{
        display: base64Thumb ? 'block' : 'none',
        background: base64Thumb
          ? `url(data:${img.mime};base64,${base64Thumb}) center/cover no-repeat`
          : 'none',
      }}
    >
    </div>
  </div>
</div>

<style is:global>
  .st-image {
    /*  */

    &-img {
      /*  */
    }

    &-placeholder {
      filter: blur(10px);
    }
  }

  /*
    Without JS, the img is visible and placeholder is hidden.
    The reason for hiding the placeholder without js is because it can
    leave artifacts on transparent images.
  */
  body.no-js .st-image {
    &-img {
      @apply opacity-100;
    }
    &-placeholder {
      @apply hidden;
    }
  }

  /*
    With JS enabled, we show the placeholder and apply transitions
  */
  body.js .st-image.vfx {
    .st-image-img {
      @apply transition-opacity;
      transition-duration: 600ms;
    }
    .st-image-placeholder {
      @apply block;
      @apply transition-opacity;
      transition-duration: 600ms;
    }
  }

  /*
    With JS enabled, we show the placeholder and apply transitions
  */
  body.js.vfxReady .st-image.vfx:not(.-loaded) {
    .st-image-img {
      @apply opacity-0;
    }
    .st-image-placeholder {
      @apply opacity-40;
    }
  }

  /* Once the image is loaded, cross-fade it with the placeholder */
  body.js .st-image.vfx.-loaded {
    .st-image-img {
      @apply opacity-100;
    }
    .st-image-placeholder {
      @apply opacity-0;
    }
  }
</style>
