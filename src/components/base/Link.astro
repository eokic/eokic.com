---
// TYPES
import type { ILink } from '@/interfaces'

// PROPS
interface Props {
  link: ILink
  label?: string
  class?: string
  presentational?: boolean
}
const { link, label, class: cssClass, presentational } = Astro.props

// COMPONENTS
import { Icon } from '@/components'

/*
  Note: if no `label`` is provided, then it is presumed that a <slot> was used.
  In this case, the <Link> component will be focusable and serves primarily to
    assist with accessibility, but will not have "link" styles applied.
  One use-case for this is for <Link> to wrap around a large chunk of content
    like a clickable card.
*/

// HELPERS
const shouldSmoothScroll = link.url && link.url.startsWith('#')
---

<a
  class:list={[
    {
      focusable: !label && !link.title,
      link: label || link.title,
    },
    ...(typeof cssClass === 'string' ? [cssClass] : cssClass || []),
  ]}
  href={link.url}
  rel={link.isPrivate ? 'noopener noreferrer' : null}
  referrerpolicy={link.isPrivate
    ? ('no-referrer' satisfies HTMLAttributeReferrerPolicy)
    : null}
  target={link.openInNewTab
    ? ('_blank' satisfies HTMLAttributeAnchorTarget)
    : ''}
  aria-hidden={presentational ? true : null}
  tabindex={presentational ? -1 : 0}
  data-smooth-scroll={shouldSmoothScroll}
>
  {link.icon ? <Icon id={link.icon} decorative /> : null}{
    label ? label : link.title ? link.title : null
  }
  <slot />
</a>

<style is:global>
  .link,
  .focusable {
    @apply inline-block rounded;

    .icon {
      margin-right: 0.25em;
      vertical-align: -0.1em;
    }
  }

  .link {
    @apply text-primary underline underline-offset-2;

    /* Hover */
    &:not(:active):hover {
      @apply text-secondary-dark;
    }
  }

  .focusable {
    /* Hover */
    &:not(:active):hover {
      outline-color: hsl(var(--color-primary));
    }

    /* Focus */
    &:not(:active):focus-visible {
      outline: 0.5rem solid hsl(var(--color-focus-sr));
    }

    /* Pressed */
    &:active {
      outline-width: 1px;
      outline-offset: 0.1em;
    }
  }

  :where(.link, .focusable) {
    outline: var(--hover-outline-width) solid transparent;
    outline-offset: 0.15em;

    &:not(:active):focus-visible {
      outline: 0.5rem solid hsl(var(--color-focus-sr));
    }
  }
</style>
