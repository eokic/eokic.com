---
// TYPES
import type { ILink } from '@/interfaces'

// PROPS
interface Props {
  link: ILink
  label?: string
  cssClass?: string | string[]
}
const { link, label, cssClass } = Astro.props

/*
  Note: if no `label`` is provided, then it is presumed that a <slot> was used.
  In this case, the <Link> component will be focusable and serves primarily to
    assist with accessibility, but will not have "link" styles applied.
  One use-case for this is for <Link> to wrap around a large chunk of content
    like a clickable card.
*/

// HELPERS
const shouldSmoothScroll = link.url && link.url.startsWith('#')
---

<a
  class:list={[
    {
      focusable: !label,
      link: label,
    },
    ...(typeof cssClass === 'string' ? [cssClass] : cssClass || []),
  ]}
  href={link.url}
  rel={link.isPrivate ? 'noopener noreferrer' : null}
  referrerpolicy={link.isPrivate
    ? ('no-referrer' satisfies HTMLAttributeReferrerPolicy)
    : null}
  target={link.openInNewTab
    ? ('_blank' satisfies HTMLAttributeAnchorTarget)
    : ''}
  tabindex="0"
  data-smooth-scroll={shouldSmoothScroll}
>
  {label ? <span>{label}</span> : null}
  <slot />
</a>

<style is:global>
  .link {
    @apply underline underline-offset-4;
    @apply transition-all;
    color: blue; /* TODO: from brand variables */
  }

  .focusable {
    @apply inline-block;
    @apply rounded-lg;

    /* Hover */
    &:not(:active):hover {
      outline-color: hsl(var(--color-primary));
    }

    /* Focus */
    &:not(:active):focus-visible {
      outline: 0.5rem solid hsl(var(--color-focus-sr));
    }

    /* Pressed */
    &:active {
      outline-width: 1px;
      outline-offset: 0.1em;
    }
  }

  :where(.link, .focusable) {
    outline: var(--hover-outline-width) solid transparent;
    outline-offset: 0.15em;

    &:not(:active):focus-visible {
      @apply rounded-lg;
      outline: 0.5rem solid hsl(var(--color-focus-sr));
    }
  }
</style>
